(def lst_i_1 (vector))
(def lst_i_0 (vector))
(def lst_e_1 (vector))
(def lst_e_0 (vector))
(def lst_s_1 (vector))
(def lst_s_0 (vector))
(def lrea_i 0)
(def lrea_e 0)
(def lrea_s 0)
(defn do_task [pal num] (println "Tarea Realizandose de " pal " Tiempo estimado: " num " segundos"))
(defn add_task
[nu nu2 nu3]
(cond
(= nu 0)(if (= nu2 1) (def lst_i_1 (conj lst_i_1 nu3)) (def lst_i_0(conj lst_i_0 nu3)))
(= nu 1) (if (= nu2 1) (def lst_e_1 (conj lst_e_1 nu3)) (def lst_e_0(conj lst_e_0 nu3)))
:else (if (= nu2 1) (def lst_s_1 (conj lst_s_1 nu3)) (def lst_s_0(conj lst_s_0 nu3)))))
(def cont 0)
(def activo true)
(def r_prev_impre false)
(def r_prev_email false)
(def r_prev_es false)
(while (= 5 5)
      (do
        (def ocu1 false)
        (def ocu1o false)
        (def ocu2 false)
        (def ocu2o false)
        (def ocu3 false)
        (def ocu3o false)
        (if (= (mod cont 3) 0) (add_task (rand-int 3) (rand-int 2) (+ (rand-int 9) 1)))
        (println "Tareas encoladas de Impresion " (into [] (concat lst_i_1 lst_i_0)))
        (println "Tareas encoladas de Email " (into [] (concat lst_e_1 lst_e_0)))
        (println "Tareas encoladas de E/S " (into [] (concat lst_s_1 lst_s_0)))
        (if (empty? lst_i_1) (if (not (empty? lst_i_0)) (def ocu1o true)) (def ocu1 true))
        (if (empty? lst_e_1) (if (not (empty? lst_e_0)) (def ocu2o true)) (def ocu2 true))
        (if (empty? lst_s_1) (if (not (empty? lst_s_0)) (def ocu3o true)) (def ocu3 true))
        (cond
          (r_prev_impre)
          (do
              (def ocu1 false)
              (def ocu1o false)
              (if (and (and (and (empty? lst_e_1) (empty? lst_e_0)) (empty? lst_s_1)) (empty? lst_s_0)) (do
                                                                                                            (if (empty? lst_i_1) (def ocu1 false) (def ocu1 true))
                                                                                                            (if (empty? lst_i_0) (def ocu1o false) (def ocu1o true))
                                                                                                          )
                )
            )
          (r_prev_email)
          (do
              (def ocu2 false)
              (def ocu2o false)
              (do (if (and (empty? lst_s_1) (empty? lst_s_0)) (do (def ocu2 false) (def ocu2 false)) (do (def ocu1 false) (def ocu1 false)))
                  (if (and (and (and (empty? lst_i_1) (empty? lst_i_0)) (empty? lst_s_1)) (empty? lst_s_0)) (do
                                                                                                            (if (empty? lst_e_1) (def ocu2 false) (def ocu2 true))
                                                                                                            (if (empty? lst_e_0) (def ocu2o false) (def ocu2o true))
                                                                                                          )
                    )
                )
            )
          (r_prev_es)
          (do
            (def ocu3 false)
              (def ocu3o false)
              (if (and (and (and (empty? lst_e_1) (empty? lst_e_0)) (empty? lst_i_1)) (empty? lst_i_0)) (do
                                                                                                            (if (empty? lst_s_1) (def ocu3 false) (def ocu3 true))
                                                                                                            (if (empty? lst_s_0) (def ocu3o false) (def ocu3o true))
                                                                                                          )
                )
            )
          )
        (if (activo)
          (cond
            (ocu1)(do
                    (def activo false)
                    (def r_prev_impre true)
                    (def r_prev_es false)
                    (def r_prev_email false)
                    (def num_proc (first lst_i_1))
                    (def lst_i_1 (into[] (rest lst_i_1)))
                    (def palabra "Impresion")
                    )
            (ocu1o)(do
                     (def activo false)
                     (def r_prev_impre true)
                     (def r_prev_es false)
                     (def r_prev_email false)
                     (def num_proc (first lst_i_0))
                     (def lst_i_1 (into[] (rest lst_i_1)))
                     (def palabra "Impresion")
                     )
            (ocu2)(do
                    (def activo false)
                    (def r_prev_email true)
                    (def r_prev_impre false)
                    (def r_prev_es false)
                    (def num_proc (first lst_e_1))
                    (def lst_e_1 (into[] (rest lst_e_1)))
                    (def palabra "Email")
                    )
            (ocu2o)(do
                     (def activo false)
                     (def r_prev_email true)
                     (def r_prev_impre false)
                     (def r_prev_es false)
                     (def num_proc (first lst_e_0))
                     (def lst_e_1 (into[] (rest lst_e_0)))
                     (def palabra "Email")
                     )
            (ocu3)(do
                     (def activo false)
                     (def r_prev_es true)
                     (def r_prev_impre false)
                     (def r_prev_email false)
                     (def num_proc (first lst_s_1))
                     (def lst_s_1 (into[] (rest lst_s_1)))
                     (def palabra "E/S")
                    )
            (ocu3o)(do
                     (def activo false)
                     (def r_prev_es true)
                     (def r_prev_impre false)
                     (def r_prev_email false)
                     (def num_proc (first lst_s_1))
                     (def lst_s_1 (into[] (rest lst_s_1)))
                     (def palabra "E/S")
                     )
            :else (do
                    (def num_proc "Unknown")
                    (def palabra "Waiting"))
            )
          (def num_proc (- num_proc 1))
          )
        (do_task palabra num_proc)
        (if (= num_proc 0) (do
                             (def activo true)
                             (println "Tarea Terminada")
                             (cond
                               (= palabra "Impresion") (def lrea_i (+ lrea_i 1))
                               (= palabra "Email") (def lrea_e (+ lrea_e 1))
                               (= palabra "E/S") (def lrea_s (+ lrea_s 1))
                               )

                             ) )

        (println "Tareas realizadas de Impresion " lrea_i)
        (println "Tareas realizadas de Email " lrea_e)
        (println "Tareas realizadas de E/S " lrea_s)
        (println "Siguiente tarea en " (- 3 (mod cont 3)) " segundos")
        (def cont (+ cont 1))
        (Thread/sleep 1000)
         )
  )

